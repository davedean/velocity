#!/usr/bin/bash 

if [ "$DEBUG" ] ; then
  set -x
  set -e
fi


# velocity - a fancy for loop for managing multiple hosts.


# load the hosts file if it exists
if [ -e hosts ] ; then 
  # load the hosts file, remove any lines which start with '#' and only take the first string
  hosts=`cat hosts | egrep -v '^( *)#' | awk '{print $1}' ` ; 
else
  # if there's no hosts file we can't do anything anyway, so exit
  echo "no hosts file?" 

CAT<<EOF
create a file in the directory you are currently in, called 'hosts'. 

Put hostnames/IPs in the file, you can also use '#' to start comment lines. Then this script will iterate over the hostnames and run commands for you.

You can use the -l option (must be the first argument!) to run local commands like ping or ssh-copy-id etc.

examples:

# copy your ssh key to servers:
./goto -l ssh-copy-id

# check the contents of your home dir on servers:
./goto ls -l
EOF
  exit 5
fi

# specify options files to set ssh options, global and then local
options_files="$HOME/.velocity/ssh-options ssh-options"

options=''
for file in $options_files ; do 
  if [ -e "$file" ] ; then
    # load options, removing lines which start with '#' or are empty
    options="$options `cat "$file" | sed 's/#.*//g' | egrep -v '^( *)$' `"
  fi
done


# if the first option is '-l' for 'local' 
if [ "$1" == "-l" ] ; then
  mode=$1
  shift   	# ignore the '-l'
  command=$@   	# set command
elif [ "$1" == "-p" ] ; then
  mode=$1
  shift         # ignore the '-p'
  command="scp $@" # set command
else
  REMOTE=true	# set REMOTE
  command=$@	# set command to be the whole string
fi

success=''
failure=''
# if the command is to be executed remotely ..
if [ "$REMOTE" ] ; then
  for host in $hosts ; do 
    echo "# $host:" >&2
    # run the command remotely using ssh-options
    ssh $options "$host" $@  
    if [ "$?" == "0" ] ; then 
      success="$success $host "
    else
      failure="$failure $host "
    fi
  done
elif [ "$mode" == "-l" ] ; then
  for host in $hosts ; do 
    echo "# $host:" >&2
    # run the command locally ignoring ssh options
    $command $host 
    if [ "$?" == "0" ] ; then
      success="$success $host "
    else
      failure="$failure $host "
    fi
  done
elif [ "$mode" == "-p" ] ; then
  for host in $hosts ; do
    echo "# $host:" >&2
    # run the command locally ignoring ssh options
    $command $host:
    if [ "$?" == "0" ] ; then
      success="$success $host "
    else
      failure="$failure $host "
    fi
  done
fi

# print a report

if [ "$success" ] ; then
  echo "# SUCCESS: $success" >&2
fi

if [ "$failure" ] ; then
  echo "# FAILURE: $failure" >&2
fi
